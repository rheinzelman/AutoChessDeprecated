Installation:
Currently tested and working on linux with python3. Dependencies need to be installed through pip. Dependencies needed are: 
 - chess
 - pygame 
Once these libraries are installed, run main.py with 'python3 main.py'

Overview:

To fully understand what's going on within the chess and pygame function calls, it's best to read the documentation on their respective websites.

There are three gamemodes, player vs player, player vs black CPU, player vs white CPU, and is chosen through the GAMEMODE variable ('P', 'W', and 'B' respectively)

All piece images are loaded into memory through a dictionary with the notation (Q,K,N,P being white's queen, king, knight, and pawn) of each piece as a key to the respective image.

drawGameState():
The board is drawn through pygame by first creating a black screen with the dimensions depending on the global variable 'size'. The game state is drawn at the beginning of a game, and after each move, with varying conditions determined by the gamemode. Drawing the gamestate is done as follows:

1. Draw the squares by iterating through both the rows and columns of the board (in this case 8 for each)in a nested loop, and each time draw an alternating colored rectangle, whose size is determined by SQUARE_SIZE, positioned by multiply the row and column with SQUARE_SIZE.  

2. Draw the pieces in the same manner as the squares, and blit the piece images to their positions by using the board notation as a key to the images dictionary created earlier.

Main Loop: 

Pygame is initialized along with all the windows. A gameEngine object is created with the GAMEMODE and CPU_DIFFICULTY passed as parameters, and will be used to keep track of the board state using the chess library, and to generate CPU moves using stockfish. 

A 2d array called boardState is created which will contain the position of all pieces using this notation: 

b bishop
k king
n knight
p pawn
q queen
r rook

with lowercase representing the black pieces, and vice versa. 

Player clicks are calculated through pygame's get_pos() function. On MOUSEBUTTONDOWN, x and y position of the cursor is stored into a playerClick tuple. This tuple, with each element containing the x and y position, are then added to the 