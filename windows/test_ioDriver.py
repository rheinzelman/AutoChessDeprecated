import pytest
import chess
import chess.engine
from ioDriver import IODriver
from gameEngine import chessEngine

# unit tests


# unit test
def test_assignToArray():
    i = IODriver()
    blankBoardArray = [
        ['', '', '', '', '', '', '', ''],
        ['', '', '', '', '', '', '', ''],
        ['', '', '', '', '', '', '', ''],
        ['', '', '', '', '', '', '', ''],
        ['', '', '', '', '', '', '', ''],
        ['', '', '', '', '', '', '', ''],
        ['', '', '', '', '', '', '', ''],
        ['', '', '', '', '', '', '', '']
    ]
    # standard starting FEN
    charList1 = ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']
    boardArray1 = [
        ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
        ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
        ['.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.'],
        ['.', '.', '.', '.', '.', '.', '.', '.'],
        ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
        ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']
    ]
    assert i.assignToArray(blankBoardArray, charList1, 0) == boardArray1

#     # reversed standard starting FEN
#     charList2 = ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']
#     boardArray2 = [
#         ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],
#         ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
#         ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']
#     ]
#     self.assertEqual(i.assignToArray(blankBoardArray, charList2, 0), boardArray2)
#
#     # blank FEN
#     charList3 = ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
#                  '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.',
#                  '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']
#     boardArray3 = [
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.']
#     ]
#     self.assertEqual(i.assignToArray(blankBoardArray, charList3, 0), boardArray3)
#
# # integration test of formatASCII and assignToArray with the chess library's board call
# def test_formatASCII():
#     i = IODriver()
#     g1 = chessEngine('W', '0', 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR')
#     boardArray1 = [
#         ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
#         ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
#         ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']
#     ]
#     self.assertEqual(i.formatASCII(g1.board), boardArray1)
#     g1.quitEngine()
#     g2 = chessEngine('W', '0', 'RNBQKBNR/PPPPPPPP/8/8/8/8/pppppppp/rnbqkbnr')
#     boardArray2 = [
#         ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R'],
#         ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
#         ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r']
#     ]
#     self.assertEqual(i.formatASCII(g2.board), boardArray2)
#     g2.quitEngine()
#     g3 = chessEngine('W', '0', '8/8/8/8/8/8/8/8')
#     boardArray3 = [
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.'],
#         ['.', '.', '.', '.', '.', '.', '.', '.']
#     ]
#     self.assertEqual(i.formatASCII(g3.board), boardArray3)
#     g3.quitEngine()

if __name__ == '__main__':
    test_assignToArray()